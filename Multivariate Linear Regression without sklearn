import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# 1. Import the data
my_data = pd.read_csv('home.txt', names=["size", "bedroom", "price"])
print("Raw Data (First 5 Rows):")
print(my_data.head())

# 2. Keep a copy of raw data for visualization
raw_data = my_data.copy()

# 3. Z-score normalization
z_data = (my_data - my_data.mean()) / my_data.std()

# 4. Min-Max normalization
minmax_data = (my_data - my_data.min()) / (my_data.max() - my_data.min())

# 5. Plot comparison of normalization methods
fig, axs = plt.subplots(3, 3, figsize=(15, 9))
features = ["size", "bedroom", "price"]

for i, feature in enumerate(features):
    axs[i, 0].hist(raw_data[feature], bins=30, color='gray', alpha=0.7)
    axs[i, 0].set_title(f"Original: {feature}")
    
    axs[i, 1].hist(z_data[feature], bins=30, color='blue', alpha=0.7)
    axs[i, 1].set_title(f"Z-score: {feature}")
    
    axs[i, 2].hist(minmax_data[feature], bins=30, color='green', alpha=0.7)
    axs[i, 2].set_title(f"Min-Max: {feature}")

plt.tight_layout()
plt.suptitle("Feature Distribution: Original vs Z-score vs Min-Max", fontsize=16, y=1.02)
plt.show()

# 6. Use Z-score normalized data for training
my_data = z_data.copy()

# 7. Prepare matrix
X = my_data.iloc[:, 0:2]
ones = np.ones([X.shape[0], 1])
X = np.concatenate((ones, X), axis=1)

y = my_data.iloc[:, 2:3].values
theta = np.zeros([1, 3])

# 8. Set hyperparameters
alpha = 0.01
iters = 1000

# 9. Cost function
def computeCost(X, y, theta):
    tobesummed = np.power(((X @ theta.T) - y), 2)
    return np.sum(tobesummed) / (2 * len(X))

# 10. Gradient descent
def gradientDescent(X, y, theta, iters, alpha):
    cost = np.zeros(iters)
    for i in range(iters):
        theta = theta - (alpha / len(X)) * np.sum(X * (X @ theta.T - y), axis=0)
        cost[i] = computeCost(X, y, theta)
    return theta, cost

# 11. Run gradient descent
g, cost = gradientDescent(X, y, theta, iters, alpha)
print("\nFinal Theta (Model Parameters):\n", g)
print("Final Cost:", computeCost(X, y, g))

# 12. Plot cost function
fig, ax = plt.subplots()
ax.plot(np.arange(iters), cost, 'r')
ax.set_xlabel('Iterations')
ax.set_ylabel('Cost')
ax.set_title('Cost vs. Training Iterations (Z-score Normalized)')
plt.tight_layout()
plt.show()

